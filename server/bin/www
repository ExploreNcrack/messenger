#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore, session } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);
// socket mount the middleware to extract the auth token info
const wrap = (middleware) => (socket, next) =>
  middleware(socket.request, {}, next);

io.use(
  wrap(
    session({
      resave: true,
      key: "connect.sid",
      secret: process.env.SESSION_SECRET,
      saveUninitialized: true,
      store: sessionStore,
    })
  )
);

function logOutDisconnectHandler(socket) {
  const id = socket.request.session.userId;
  if (id in onlineUsers) {
    onlineUsers[id].delete(socket.id);
    if (onlineUsers[id].size == 0) {
      delete onlineUsers[id];
      socket.broadcast.emit("remove-offline-user", id);
    }
    socket.disconnect();
  }
}

io.on("connection", (socket) => {

  socket.on("go-online", () => {
    const id = socket.request.session.userId;
    // each user has its own room, when logged in to the same account, the new device will join the same room
    socket.join(id);
    // create/update userId key map to socketId
    if (!(id in onlineUsers)) {
      onlineUsers[id] = new Set();
    }
    onlineUsers[id].add(socket.id);
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("new-message", (data) => {
    const id = socket.request.session.userId;
    socket.broadcast.to(id).emit("new-message", {
      // syn new message to other devices
      message: data.message,
      sender: data.sender,
    });
    if (data.recipientId in onlineUsers) {
      // if the message recipient user is online,
      //   send new message to all recipient devices that are currently online
      socket.to(data.recipientId).emit("new-message", {
        message: data.message,
        sender: data.sender,
      });
    }
  });

  socket.on("message-read", (data) => {
    const id = socket.request.session.userId;
    socket.broadcast.to(id).emit("message-read", {
      // syn message read to other devices
      conversationId: data.conversationId,
      senderId: id,
      recipientId: data.recipientId,
    });
    if (data.recipientId in onlineUsers) {
      socket.to(data.recipientId).emit("message-read", {
        conversationId: data.conversationId,
        senderId: id,
        recipientId: data.recipientId,
      });
    }
  });

  socket.on("logout", () => logOutDisconnectHandler(socket));
  socket.on("disconnect", () => logOutDisconnectHandler(socket));
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
